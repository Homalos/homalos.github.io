import{_ as k,C as n,c as r,o as d,j as i,G as t,ax as l,a,w as p}from"./chunks/framework.CYo7ob5S.js";const P=JSON.parse('{"title":"Homalos","description":"","frontmatter":{},"headers":[],"relativePath":"guide/install.md","filePath":"guide/install.md","lastUpdated":1752050908000}'),g={name:"guide/install.md"},u={class:"details custom-block"};function b(c,s,y,C,v,F){const h=n("NolebasePageProperties"),e=n("VPNolebaseInlineLinkPreview"),o=n("NolebaseGitChangelog");return d(),r("div",null,[s[15]||(s[15]=i("h1",{id:"homalos",tabindex:"-1"},[a("Homalos "),i("a",{class:"header-anchor",href:"#homalos","aria-label":'Permalink to "Homalos"'},"​")],-1)),t(h),s[16]||(s[16]=i("h2",{id:"初略安装流程",tabindex:"-1"},[a("初略安装流程 "),i("a",{class:"header-anchor",href:"#初略安装流程","aria-label":'Permalink to "初略安装流程"'},"​")],-1)),i("ol",null,[i("li",null,[i("p",null,[s[1]||(s[1]=a("进入 ")),t(e,{href:"https://github.com/Homalos/Homalos/releases",target:"_blank",rel:"noreferrer"},{default:p(()=>s[0]||(s[0]=[a("Releases")])),_:1}),s[2]||(s[2]=a(" 界面下载")),s[3]||(s[3]=i("strong",null,"对应版本",-1)),s[4]||(s[4]=a("的 .whl 或 .tar.gz文件，.whl 是 Python 支持的安装文件，可以用 pip + whl 文件完整路径安装，或解压缩 .tar.gz 文件，.tar.gz 是源代码文件，可以通过解压得到所有项目源代码。"))])]),s[14]||(s[14]=l('<li><p>安装 uv，uv 是本项目使用的 Python 虚拟环境及软件包管理工具，可以代替 conda，并且下载软件包速度是其它工具的几倍甚至十几倍。</p><p>如果你是 Windows 系统，推荐在 powershell 中执行下述命令安装 uv：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">powershell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecutionPolicy ByPass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span></code></pre></div><p>如果是 Linux 系统，在终端中使用下述命令安装 uv：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -LsSf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://astral.sh/uv/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span></code></pre></div></li><li><p>安装 Python，建议安装本项目用的版本 <strong>3.12.9</strong>。</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uv python install </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span></code></pre></div></li><li><p>安装 whl 文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> homalos-0.0.1-cp312-cp312-win_amd64.whl</span></span></code></pre></div><p>或解压缩 homalos-0.0.1.tar.gz</p></li><li><p>Python虚拟环境的创建和依赖包的下载。</p><p>进入到 Homalos 项目根目录，执行下述命令让 uv 根据 pyproject.toml 中的配置，自动在项目根目录创建 Python 虚拟环境和依赖包下载：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uv sync</span></span></code></pre></div></li>',4)),i("li",null,[s[11]||(s[11]=i("p",null,"编译 VNPY_CTP（可选）",-1)),s[12]||(s[12]=i("p",null,[a("编译 vnpy_ctp 不是必要执行的操作，本项目中自带 "),i("code",null,"CTP API 6.7.7"),a(" 接口文件和"),i("strong",null,"穿透式实盘环境"),a("的dll文件。")],-1)),i("details",u,[s[9]||(s[9]=l("<summary>CTP 介绍</summary><p>CTP 全称为综合交易平台（Comprehensive Transaction Platform），是上海期货交易所全资子公司上期技术公司推出的一套用于期货交易的系统。CTP API 则是这套系统提供给开发者的一组接口，方便开发者通过编程的方式接入 CTP 系统，进行期货交易的相关操作，以下是其具体介绍：</p><ul><li><strong>系统架构</strong> ：CTP 系统的架构分为前置层、核心层和应用层三个层次。前置层负责与交易所的通信，核心层处理交易逻辑，应用层则是开发者通过 API 接入的部分，这种分层设计既保证了高效的交易处理，又提供了灵活的扩展性。</li><li><strong>功能作用</strong> ：通过 CTP API，开发者可以实现行情订阅、订单提交、成交回报、账户查询、历史数据回溯等功能，能够满足程序化交易的需求，如进行量化策略的开发和测试等，是程序化交易的核心基础设施。</li><li><strong>优势特点</strong> ：具有高性能、低延迟，适合高频交易；经过多年市场验证，稳定性高；各大期货公司均提供 CTP 接口支持，具有广泛的应用和良好的兼容性。</li><li><strong>开发使用</strong> ：开发者可以使用 C++、Python、Java、Rust 等编程语言来实现 CTP API 接口的开发，通过调用相关函数来完成与期货交易相关的操作，如在 Python 中可以使用 pybind11 或 swig 为官方 C++ 版 CTP 接口提供 Python 版 API，从而进行期货交易自动化开发。</li></ul>",3)),i("p",null,[s[6]||(s[6]=a("上期技术（上海期货信息技术有限公司）官网：")),t(e,{href:"https://www.shfe.com.cn/sfit/",target:"_blank",rel:"noreferrer"},{default:p(()=>s[5]||(s[5]=[a("https://www.shfe.com.cn/sfit/")])),_:1})]),i("p",null,[s[8]||(s[8]=a("CTP API 下载地址：")),t(e,{href:"https://www.simnow.com.cn/static/apiDownload.action",target:"_blank",rel:"noreferrer"},{default:p(()=>s[7]||(s[7]=[a("https://www.simnow.com.cn/static/apiDownload.action")])),_:1})]),s[10]||(s[10]=i("p",null,"Tips：SimNow 是上期技术公司专为投资者打造的期货模拟仿真交易平台，也是上海期货交易所投资者教育网认证的期货模拟仿真系统。",-1))]),s[13]||(s[13]=l(`<p>在编译之前请确保已经安装了Visual Studio（Windows）、GCC（Linux），这是因为原始CTP API 是 C++ 开发的，在项目中需要编译为 Python 接口需要用到 C++ 编译器。若需要编译其他版本 CTP API 则需要下载原始相应版本 CTP API 文件对项目中相关的文件进行替换再执行编译。</p><ul><li><p><strong>清理旧的构建</strong></p><p>如果是 Windows，打开 powershell 终端进入项目根目录，执行删除<code>dist</code>、<code>build</code>目录命令：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Remove-Item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Recurse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Force dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ErrorAction SilentlyContinue</span></span></code></pre></div><p>或 CMD 终端执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>如果是 Linux 终端执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><p><strong>执行构建</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"></span></code></pre></div></li></ul>`,2))])]),s[17]||(s[17]=l('<p>python build.py ```</p><h2 id="启动方式" tabindex="-1">启动方式 <a class="header-anchor" href="#启动方式" aria-label="Permalink to &quot;启动方式&quot;">​</a></h2><p>Homalos 有着众多启动方式，每种方式各有优点：</p><ul><li><strong>一键启动版本</strong>：直接运行 run.bat 或 run.sh。</li><li><strong>各服务独立启动版本</strong>：方便调试、启动灵活的特点。</li></ul><blockquote><p>悄悄话: 我还是推荐你用 Command 的，毕竟~~~</p></blockquote><h3 id="一键启动" tabindex="-1">一键启动 <a class="header-anchor" href="#一键启动" aria-label="Permalink to &quot;一键启动&quot;">​</a></h3><p>执行启动命令之前请确保激活当前 Python 虚拟环境：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv\\Scripts\\activate</span></span></code></pre></div><p>启动主程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start.py</span></span></code></pre></div><p>一键启动按下面的顺序启动了这些服务</p><ul><li><p>启动行情网关：</p></li><li><p>启动订单执行网关：</p></li><li><p>启动风险管理器：</p></li><li><p>启动数据记录器：</p></li><li><p>启动策略引擎：</p></li></ul><p>成功启动这几个核心服务后代表整个量化系统就已经跑起来了，行情网关和订单执行网关是其它服务的基础依赖服务所以要优先启动。</p><p>启动行情网关后，行情网关就会读取配置信息去调用底层 CTP API 连接交易所的行情服务器，然后订阅配置中指定的合约行情数据并且通过指定地址把行情发布出去，供其他服务使用。</p><p>启动订单执行网关后，订单执行网关也会读取配置信息去调用底层 CTP API 连接交易所的交易服务器，同时随时准备接受订单引擎发过来的订单请求（比如开仓、平仓）。</p><p>启动风险管理器后，风险管理器会通过订阅订单执行网关的发布地址，维护持仓信息，并根据配置信息对持仓的限制发出警告。</p><p>启动数据记录器后，数据记录器会通过订阅行情网关和订单执行网关的发布地址，实时记录tick、交易、账户等数据。</p><p>启动策略引擎后，策略引擎会自动加载配置的策略信息，执行策略脚本，向订单执行网关发出开仓、平仓等请求。</p>',18)),t(o)])}const f=k(g,[["render",b]]);export{P as __pageData,f as default};
