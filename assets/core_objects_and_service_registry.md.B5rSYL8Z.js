import{_ as n,C as o,c as h,o as c,j as t,G as s,ar as p,a,w as d}from"./chunks/framework.CXkkaYWf.js";const y=JSON.parse('{"title":"核心对象和服务注册表","description":"","frontmatter":{},"headers":[],"relativePath":"core/objects_and_service_registry.md","filePath":"core/objects_and_service_registry.md","lastUpdated":1752832074000}'),k={name:"core/objects_and_service_registry.md"};function g(E,e,b,u,_,D){const r=o("NolebasePageProperties"),i=o("VPNolebaseInlineLinkPreview"),l=o("NolebaseGitChangelog");return c(),h("div",null,[e[5]||(e[5]=t("h1",{id:"核心对象和服务注册表",tabindex:"-1"},[a("核心对象和服务注册表 "),t("a",{class:"header-anchor",href:"#核心对象和服务注册表","aria-label":'Permalink to "核心对象和服务注册表"'},"​")],-1)),s(r),e[6]||(e[6]=t("p",null,"本文档涵盖构成 Homalos 交易系统主干的基本数据结构和服务发现机制。核心对象定义了市场数据、订单、交易和仓位的主要数据模型，而服务注册表则提供了集中式服务发现和健康监控功能。",-1)),t("p",null,[e[2]||(e[2]=a("EventBus 通讯系统请参见")),s(i,{href:"https://deepwiki.com/Homalos/Homalos/2.1-event-driven-system",target:"_blank",rel:"noreferrer"},{default:d(()=>e[0]||(e[0]=[a("事件驱动系统")])),_:1,__:[0]}),e[3]||(e[3]=a("，TradingEngine 编排请参见")),s(i,{href:"https://deepwiki.com/Homalos/Homalos/2.2-trading-engine",target:"_blank",rel:"noreferrer"},{default:d(()=>e[1]||(e[1]=[a("交易引擎")])),_:1,__:[1]}),e[4]||(e[4]=a("。"))]),e[7]||(e[7]=p(`<h2 id="核心数据对象" tabindex="-1">核心数据对象 <a class="header-anchor" href="#核心数据对象" aria-label="Permalink to &quot;核心数据对象&quot;">​</a></h2><p>Homalos 系统使用一套全面的数据类来表示交易实体。所有核心对象都继承自<code>BaseData</code>并遵循一致的模式，包括网关属性和符号规范化。</p><h3 id="基础数据结构" tabindex="-1">基础数据结构 <a class="header-anchor" href="#基础数据结构" aria-label="Permalink to &quot;基础数据结构&quot;">​</a></h3><p>该类<code>BaseData</code>作为所有交易对象的基础，提供网关归属和可扩展性：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@dataclass</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gateway_name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extra: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>所有数据对象都会自动生成<code>ho_symbol</code>格式规范化的符号标识符（），<code>{symbol}.{exchange.value}</code>以确保整个系统的识别一致性。</p><h3 id="市场数据对象" tabindex="-1">市场数据对象 <a class="header-anchor" href="#市场数据对象" aria-label="Permalink to &quot;市场数据对象&quot;">​</a></h3><h4 id="tickdata-结构" tabindex="-1">TickData 结构 <a class="header-anchor" href="#tickdata-结构" aria-label="Permalink to &quot;TickData 结构&quot;">​</a></h4><p>该类<code>TickData</code>提供全面的市场数据，包括五级订单簿、每日统计数据和限价。它支持交易所时间戳和本地时间戳，以便进行延迟分析。</p><h4 id="bardata-结构" tabindex="-1">BarData 结构 <a class="header-anchor" href="#bardata-结构" aria-label="Permalink to &quot;BarData 结构&quot;">​</a></h4><p><code>BarData</code>表示特定交易间隔的烛台数据，包含 OHLCV 信息以及营业额和未平仓合约数据。</p><h3 id="交易对象" tabindex="-1">交易对象 <a class="header-anchor" href="#交易对象" aria-label="Permalink to &quot;交易对象&quot;">​</a></h3><h4 id="订单管理对象" tabindex="-1">订单管理对象 <a class="header-anchor" href="#订单管理对象" aria-label="Permalink to &quot;订单管理对象&quot;">​</a></h4><p>订单管理系统使用三个主要对象：</p><ul><li><code>OrderRequest</code>用于订单创建请求</li><li><code>OrderData</code>用于跟踪订单状态</li><li><code>TradeData</code>用于记录交易执行情况</li></ul><p>该类<code>OrderData</code>包括<code>is_active()</code>检查订单状态<code>ACTIVE_STATUSES</code>和<code>create_cancel_request()</code>取消订单的方法。</p><h4 id="头寸和账户对象" tabindex="-1">头寸和账户对象 <a class="header-anchor" href="#头寸和账户对象" aria-label="Permalink to &quot;头寸和账户对象&quot;">​</a></h4><p>头寸和账户数据提供实时投资组合跟踪，自动计算可用余额和规范化标识符。</p><h3 id="合约和数据对象" tabindex="-1">合约和数据对象 <a class="header-anchor" href="#合约和数据对象" aria-label="Permalink to &quot;合约和数据对象&quot;">​</a></h3><p>该系统包括<code>ContractData</code>用于工具规范、<code>QuoteData</code>用于报价管理以及用于市场数据操作的各种请求对象（ <code>SubscribeRequest</code>、、<code>HistoryRequest</code>） 。<code>QuoteRequest</code></p><h2 id="服务注册系统" tabindex="-1">服务注册系统 <a class="header-anchor" href="#服务注册系统" aria-label="Permalink to &quot;服务注册系统&quot;">​</a></h2><p>该类<code>ServiceRegistry</code>为所有系统组件提供集中式服务发现和健康监控。它以事件驱动的服务形式运行，管理服务注册、心跳监控和服务发现请求。</p><h3 id="服务生命周期管理" tabindex="-1">服务生命周期管理 <a class="header-anchor" href="#服务生命周期管理" aria-label="Permalink to &quot;服务生命周期管理&quot;">​</a></h3><p>服务注册表处理四种主要事件类型：</p><table tabindex="0"><thead><tr><th>事件类型</th><th>处理程序</th><th>描述</th></tr></thead><tbody><tr><td><code>SERVICE_REGISTER</code></td><td><code>handle_register()</code></td><td>注册新服务并广播<code>SERVICE_UPDATED</code></td></tr><tr><td><code>SERVICE_UNREGISTER</code></td><td><code>handle_unregister()</code></td><td>删除服务和广播<code>SERVICE_UPDATED</code></td></tr><tr><td><code>SERVICE_HEART_BEAT</code></td><td><code>handle_heartbeat()</code></td><td>更新服务心跳时间戳</td></tr><tr><td><code>SERVICE_DISCOVERY</code></td><td><code>handle_discovery_request()</code></td><td>使用经过过滤的服务信息进行响应</td></tr></tbody></table><p>发现系统支持基于模式的过滤，并返回不包含敏感数据的经过清理的服务信息。</p><h3 id="心跳监控" tabindex="-1">心跳监控 <a class="header-anchor" href="#心跳监控" aria-label="Permalink to &quot;心跳监控&quot;">​</a></h3><p>注册表运行一个后台线程来监视服务健康状况：</p><ol><li><strong>心跳超时</strong>：10秒</li><li><strong>检查间隔</strong>：5秒</li><li><strong>自动清理</strong>：超过超时的服务将自动取消注册</li><li><strong>失败事件</strong>：<code>SERVICE_FAILED</code>针对超时场景发布事件</li></ol><h2 id="事件驱动集成" tabindex="-1">事件驱动集成 <a class="header-anchor" href="#事件驱动集成" aria-label="Permalink to &quot;事件驱动集成&quot;">​</a></h2><p>核心对象和服务注册表通过标准化的事件类型和数据结构与事件系统无缝集成。</p><h3 id="核心对象的事件类型" tabindex="-1">核心对象的事件类型 <a class="header-anchor" href="#核心对象的事件类型" aria-label="Permalink to &quot;核心对象的事件类型&quot;">​</a></h3><p>事件系统为每个核心对象类别定义了特定的事件类型：</p><table tabindex="0"><thead><tr><th>对象类别</th><th>事件类型</th></tr></thead><tbody><tr><td><strong>市场数据</strong></td><td><code>TICK_UPDATED</code>，<code>MARKET_TICK</code>, <code>MARKET_BAR</code></td></tr><tr><td><strong>订单</strong></td><td><code>ORDER_UPDATED</code>，<code>ORDER_SUBMITTED</code>, <code>ORDER_CANCELLED</code>, <code>ORDER_FILLED</code></td></tr><tr><td><strong>交易</strong></td><td><code>TRADE_UPDATED</code>，<code>TRADE</code></td></tr><tr><td><strong>职位</strong></td><td><code>POSITION_UPDATED</code></td></tr><tr><td><strong>账户</strong></td><td><code>ACCOUNT_UPDATED</code></td></tr><tr><td><strong>合同</strong></td><td><code>CONTRACT_UPDATED</code></td></tr></tbody></table><h2 id="数据流和组件关系" tabindex="-1">数据流和组件关系 <a class="header-anchor" href="#数据流和组件关系" aria-label="Permalink to &quot;数据流和组件关系&quot;">​</a></h2><h3 id="线程安全和回调处理" tabindex="-1">线程安全和回调处理 <a class="header-anchor" href="#线程安全和回调处理" aria-label="Permalink to &quot;线程安全和回调处理&quot;">​</a></h3><p>该类<code>BaseGateway</code>通过辅助类实现线程安全回调处理<code>ThreadSafeCallback</code>，确保正确的事件循环集成：</p><ul><li><strong>事件循环集成</strong>：用于<code>asyncio.run_coroutine_threadsafe()</code>异步任务调度</li><li><strong>重试逻辑</strong>：使用指数退避实现自动重试</li><li><strong>统计跟踪</strong>：监控性能分析的成功/失败率</li><li><strong>资源管理</strong>：适当清理线程池和事件循环</li></ul><h2 id="配置集成" tabindex="-1">配置集成 <a class="header-anchor" href="#配置集成" aria-label="Permalink to &quot;配置集成&quot;">​</a></h2><p>服务注册表和核心对象通过<code>system.yaml</code>文件与系统配置集成，该文件定义：</p><ul><li><strong>事件总线配置</strong>：队列大小、计时器间隔、监控设置</li><li><strong>数据库配置</strong>：连接池、批处理、WAL 模式</li><li><strong>网关配置</strong>：连接参数、超时、重试设置</li><li><strong>服务管理</strong>：健康检查间隔、超时值、自动恢复设置</li></ul>`,41)),s(l)])}const C=n(k,[["render",g]]);export{y as __pageData,C as default};
