import{_ as c,C as t,c as l,o as n,j as a,G as d,ar as h,a as s}from"./chunks/framework.CXkkaYWf.js";const P=JSON.parse('{"title":"核心架构","description":"","frontmatter":{},"headers":[],"relativePath":"core/core.md","filePath":"core/core.md","lastUpdated":1752854061000}'),i={name:"core/core.md"};function b(u,e,_,E,p,m){const o=t("NolebasePageProperties"),r=t("NolebaseGitChangelog");return n(),l("div",null,[e[0]||(e[0]=a("h1",{id:"核心架构",tabindex:"-1"},[s("核心架构 "),a("a",{class:"header-anchor",href:"#核心架构","aria-label":'Permalink to "核心架构"'},"​")],-1)),d(o),e[1]||(e[1]=h('<h2 id="目的和范围" tabindex="-1">目的和范围 <a class="header-anchor" href="#目的和范围" aria-label="Permalink to &quot;目的和范围&quot;">​</a></h2><p>本文档详细介绍了支撑整个 Homalos 量化交易系统的基础事件驱动架构，涵盖了实现系统模块间异步通信、线程安全回调处理和服务发现机制的核心基础组件。</p><p>有关特定网关实现的信息，请参阅[网关和外部连接]。有关基于此架构构建的交易引擎组件的详细信息，请参阅[交易引擎]。有关数据管理模式的信息，请参阅[数据服务]。</p><h2 id="事件驱动系统概述" tabindex="-1">事件驱动系统概述 <a class="header-anchor" href="#事件驱动系统概述" aria-label="Permalink to &quot;事件驱动系统概述&quot;">​</a></h2><p>Homalos 系统建立在集中式事件驱动架构上，所有组件通过高性能的 进行通信<code>EventBus</code>。这种设计实现了松散耦合、异步处理和可扩展的组件集成。</p><h2 id="核心事件系统" tabindex="-1">核心事件系统 <a class="header-anchor" href="#核心事件系统" aria-label="Permalink to &quot;核心事件系统&quot;">​</a></h2><h3 id="事件结构和类型" tabindex="-1">事件结构和类型 <a class="header-anchor" href="#事件结构和类型" aria-label="Permalink to &quot;事件结构和类型&quot;">​</a></h3><p>事件系统围绕类构建<code>Event</code>，类通过基于优先级的路由和跟踪功能在系统中传输类型数据。</p><h3 id="事件优先级和路由" tabindex="-1">事件优先级和路由 <a class="header-anchor" href="#事件优先级和路由" aria-label="Permalink to &quot;事件优先级和路由&quot;">​</a></h3><p>事件按优先级分类，优先级决定了事件的处理渠道和紧急程度：</p><table tabindex="0"><thead><tr><th>优先级</th><th>值</th><th>事件类型</th><th>加工通道</th></tr></thead><tbody><tr><td><code>CRITICAL</code></td><td>0</td><td><code>SYSTEM_ERROR</code>，<code>RISK_REJECTED</code></td><td>同步队列</td></tr><tr><td><code>HIGH</code></td><td>1</td><td><code>ORDER</code>， <code>TRADE</code>， <code>QUOTE</code></td><td>同步队列</td></tr><tr><td><code>NORMAL</code></td><td>2</td><td><code>MARKET_TICK</code>，<code>POSITION_UPDATED</code></td><td>异步队列</td></tr><tr><td><code>LOW</code></td><td>3</td><td><code>LOG_MESSAGE</code>，<code>STATISTICS</code></td><td>异步队列</td></tr></tbody></table><h2 id="eventbus-实现" tabindex="-1">EventBus 实现 <a class="header-anchor" href="#eventbus-实现" aria-label="Permalink to &quot;EventBus 实现&quot;">​</a></h2><h3 id="双通道架构" tabindex="-1">双通道架构 <a class="header-anchor" href="#双通道架构" aria-label="Permalink to &quot;双通道架构&quot;">​</a></h3><p>实现<code>EventBus</code>了双通道事件处理系统，将时间关键操作与后台处理分开。</p><h3 id="线程模型和生命周期" tabindex="-1">线程模型和生命周期 <a class="header-anchor" href="#线程模型和生命周期" aria-label="Permalink to &quot;线程模型和生命周期&quot;">​</a></h3><p>EventBus 管理四个独立的线程以实现最佳性能：</p><ol><li><strong>同步处理线程</strong>（<code>_sync_thread</code>）：处理高优先级事件</li><li><strong>异步处理线程</strong>（<code>_async_thread</code>）：处理后台事件</li><li><strong>同步定时器线程</strong>（<code>_sync_timer</code>）：为同步通道生成周期性定时器事件</li><li><strong>异步定时器线程</strong>（<code>_async_timer</code>）：为异步通道生成周期性定时器事件</li></ol><h2 id="网关架构" tabindex="-1">网关架构 <a class="header-anchor" href="#网关架构" aria-label="Permalink to &quot;网关架构&quot;">​</a></h2><h3 id="basegateway-和线程安全回调" tabindex="-1">BaseGateway 和线程安全回调 <a class="header-anchor" href="#basegateway-和线程安全回调" aria-label="Permalink to &quot;BaseGateway 和线程安全回调&quot;">​</a></h3><p>该<code>BaseGateway</code>抽象类为具有线程安全回调处理的外部系统集成提供了基础。</p><h3 id="线程安全事件发布" tabindex="-1">线程安全事件发布 <a class="header-anchor" href="#线程安全事件发布" aria-label="Permalink to &quot;线程安全事件发布&quot;">​</a></h3><p>该类<code>ThreadSafeCallback</code>弥补了外部 API 回调（通常在单独的线程中运行）和主事件循环之间的差距。</p><h2 id="服务注册和组件发现" tabindex="-1">服务注册和组件发现 <a class="header-anchor" href="#服务注册和组件发现" aria-label="Permalink to &quot;服务注册和组件发现&quot;">​</a></h2><p>该系统实现了服务注册模式，用于组件发现和生命周期管理。虽然<code>ServiceRegistry</code>提供的文件中没有显示具体的类，但事件系统支持与服务相关的事件：</p><h3 id="服务管理活动" tabindex="-1">服务管理活动 <a class="header-anchor" href="#服务管理活动" aria-label="Permalink to &quot;服务管理活动&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件类型</th><th>目的</th><th>数据</th></tr></thead><tbody><tr><td><code>SERVICE_REGISTER</code></td><td>注册新服务</td><td>服务元数据</td></tr><tr><td><code>SERVICE_UNREGISTER</code></td><td>取消注册服务</td><td>服务 ID</td></tr><tr><td><code>SERVICE_HEART_BEAT</code></td><td>健康检查</td><td>服务状态</td></tr><tr><td><code>SERVICE_DISCOVERY</code></td><td>查询可用服务</td><td>查询参数</td></tr><tr><td><code>SERVICE_DISCOVERY_RESPONSE</code></td><td>对发现的回应</td><td>可用服务</td></tr><tr><td><code>SERVICE_UPDATED</code></td><td>广播服务变更</td><td>更新的服务信息</td></tr><tr><td><code>SERVICE_FAILED</code></td><td>报告服务故障</td><td>失败详细信息</td></tr></tbody></table><h2 id="集成模式" tabindex="-1">集成模式 <a class="header-anchor" href="#集成模式" aria-label="Permalink to &quot;集成模式&quot;">​</a></h2><h3 id="组件注册模式" tabindex="-1">组件注册模式 <a class="header-anchor" href="#组件注册模式" aria-label="Permalink to &quot;组件注册模式&quot;">​</a></h3><p>组件通过以下方式与核心架构集成：</p><ol><li><strong>订阅事件</strong>：使用<code>event_bus.subscribe(event_type, handler)</code></li><li><strong>发布事件</strong>：使用<code>event_bus.publish(Event(type, data))</code></li><li><strong>实现回调</strong>：对于网关组件，扩展<code>BaseGateway</code></li></ol><h3 id="配置和初始化" tabindex="-1">配置和初始化 <a class="header-anchor" href="#配置和初始化" aria-label="Permalink to &quot;配置和初始化&quot;">​</a></h3><p>系统采用集中配置的方式，核心组件在系统启动时初始化。</p><p>核心架构为整个Homalos交易系统提供了坚实的基础，通过事件驱动的设计和线程安全的组件集成模式，实现了可扩展、容错和高性能的量化交易操作。</p>',33)),d(r)])}const S=c(i,[["render",b]]);export{P as __pageData,S as default};
