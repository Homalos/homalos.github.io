import{_ as s,C as r,c,o as h,j as a,G as d,ar as p,a as e,w as i}from"./chunks/framework.CXkkaYWf.js";const y=JSON.parse('{"title":"交易引擎","description":"","frontmatter":{},"headers":[],"relativePath":"core/trading_engine.md","filePath":"core/trading_engine.md","lastUpdated":1752920548000}'),b={name:"core/trading_engine.md"};function g(_,t,u,m,k,f){const l=r("NolebasePageProperties"),o=r("VPNolebaseInlineLinkPreview"),n=r("NolebaseGitChangelog");return h(),c("div",null,[t[7]||(t[7]=a("h1",{id:"交易引擎",tabindex:"-1"},[e("交易引擎 "),a("a",{class:"header-anchor",href:"#交易引擎","aria-label":'Permalink to "交易引擎"'},"​")],-1)),d(l),t[8]||(t[8]=a("p",null,"交易引擎是 Homalos 量化交易系统的中央协调器，负责协调策略执行、风险管理、订单处理和账户管理。它采用事件驱动架构，能够实时处理市场数据和交易信号，同时保持严格的风险控制和订单生命周期管理。",-1)),a("p",null,[t[3]||(t[3]=e("底层事件系统详见")),d(o,{href:"https://deepwiki.com/Homalos/Homalos/2.1-event-driven-system",target:"_blank",rel:"noreferrer"},{default:i(()=>t[0]||(t[0]=[e("事件驱动系统")])),_:1,__:[0]}),t[4]||(t[4]=e("，策略开发详见")),d(o,{href:"https://deepwiki.com/Homalos/Homalos/5.1-strategy-development",target:"_blank",rel:"noreferrer"},{default:i(()=>t[1]||(t[1]=[e("策略开发")])),_:1,__:[1]}),t[5]||(t[5]=e("，网页端交易引擎管理详见")),d(o,{href:"https://deepwiki.com/Homalos/Homalos/6.1-backend-api",target:"_blank",rel:"noreferrer"},{default:i(()=>t[2]||(t[2]=[e("后端API")])),_:1,__:[2]}),t[6]||(t[6]=e("。"))]),t[9]||(t[9]=p(`<h2 id="核心架构" tabindex="-1">核心架构 <a class="header-anchor" href="#核心架构" aria-label="Permalink to &quot;核心架构&quot;">​</a></h2><p>交易引擎由四个主要管理组件组成，它们协同处理交易操作的各个方面：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>StrategyManager</span></span>
<span class="line"><span>RiskManager</span></span>
<span class="line"><span>OrderManager</span></span>
<span class="line"><span>AccountManager</span></span></code></pre></div><h2 id="策略管理" tabindex="-1">策略管理 <a class="header-anchor" href="#策略管理" aria-label="Permalink to &quot;策略管理&quot;">​</a></h2><p>该类<code>StrategyManager</code>处理交易策略的完整生命周期，从动态加载到执行监控和错误恢复。</p><h3 id="关键组件" tabindex="-1">关键组件 <a class="header-anchor" href="#关键组件" aria-label="Permalink to &quot;关键组件&quot;">​</a></h3><table tabindex="0"><thead><tr><th>成分</th><th>目的</th><th>关键方法</th></tr></thead><tbody><tr><td><code>StrategyManager</code></td><td>主要协调员</td><td><code>load_strategy()</code>，<code>start_strategy()</code>，<code>stop_strategy()</code></td></tr><tr><td><code>StrategyHealthMonitor</code></td><td>健康监测</td><td><code>check_strategy_health()</code>，<code>attempt_recovery()</code></td></tr><tr><td><code>StrategyEventHandler</code></td><td>事件处理</td><td>事件路由和处理</td></tr></tbody></table><h3 id="策略加载流程" tabindex="-1">策略加载流程 <a class="header-anchor" href="#策略加载流程" aria-label="Permalink to &quot;策略加载流程&quot;">​</a></h3><p>策略管理器使用动态模块加载在运行时实例化策略</p><p>该<code>load_strategy()</code>方法执行自动策略类发现和 UUID 生成：</p><ul><li>从文件路径动态导入策略模块</li><li>自动发现继承自<code>BaseStrategy</code></li><li>生成唯一的 UUID 用于策略识别</li><li>处理导入错误和验证失败</li></ul><h3 id="策略健康监测" tabindex="-1">策略健康监测 <a class="header-anchor" href="#策略健康监测" aria-label="Permalink to &quot;策略健康监测&quot;">​</a></h3><p>该系统包括具有自动恢复功能的全面健康监测：</p><p>恢复配置通过以下方式管理：</p><ul><li><code>auto_recovery_enabled</code>：切换自动恢复</li><li><code>max_recovery_attempts</code>：最大重试次数</li><li><code>recovery_attempts</code>：每个策略尝试的跟踪</li></ul><h2 id="风险管理器" tabindex="-1">风险管理器 <a class="header-anchor" href="#风险管理器" aria-label="Permalink to &quot;风险管理器&quot;">​</a></h2><p>该<code>RiskManager</code>通过多个验证层实施全面的交易前风险控制：</p><h3 id="风险控制配置" tabindex="-1">风险控制配置 <a class="header-anchor" href="#风险控制配置" aria-label="Permalink to &quot;风险控制配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th>风险检查</th><th>配置键</th><th>目的</th></tr></thead><tbody><tr><td>头寸规模</td><td><code>max_position_size</code></td><td>最大位置值</td></tr><tr><td>每日损失</td><td><code>max_daily_loss</code></td><td>每日亏损限额</td></tr><tr><td>订单大小</td><td><code>max_order_size</code></td><td>最大订购数量</td></tr><tr><td>订单频率</td><td><code>order_frequency_limit</code></td><td>每分钟订单限制</td></tr><tr><td>价格验证</td><td><code>price_deviation_threshold</code></td><td>价格偏离市场</td></tr><tr><td>交易时间</td><td><code>trading_hours_check</code></td><td>基于时间的验证</td></tr></tbody></table><h3 id="增强价格验证" tabindex="-1">增强价格验证 <a class="header-anchor" href="#增强价格验证" aria-label="Permalink to &quot;增强价格验证&quot;">​</a></h3><p>风险管理者实施双层价格验证：</p><ol><li><strong>绝对价格限制</strong>：按工具类型划分的硬性限制</li><li><strong>相对价格偏差</strong>：与市场价格的百分比偏差</li></ol><h3 id="风险监控" tabindex="-1">风险监控 <a class="header-anchor" href="#风险监控" aria-label="Permalink to &quot;风险监控&quot;">​</a></h3><p>该系统包括实时风险监控和定期检查：</p><ul><li><strong>错误率监控</strong>：跟踪策略错误频率</li><li><strong>市场状况检查</strong>：验证交易时间和市场状况</li><li><strong>持仓集中度</strong>：监控投资组合集中度风险</li></ul><h2 id="订单管理器" tabindex="-1">订单管理器 <a class="header-anchor" href="#订单管理器" aria-label="Permalink to &quot;订单管理器&quot;">​</a></h2><p>该类<code>OrderManager</code>处理从下单到执行的完整订单生命周期、维护订单状态并与交易网关协调。</p><h3 id="订单数据管理" tabindex="-1">订单数据管理 <a class="header-anchor" href="#订单数据管理" aria-label="Permalink to &quot;订单数据管理&quot;">​</a></h3><p>订单管理器维护全面的订单跟踪：</p><table tabindex="0"><thead><tr><th>数据结构</th><th>目的</th><th>关键字段</th></tr></thead><tbody><tr><td><code>OrderInfo</code></td><td>订单元数据</td><td><code>order_data</code>，<code>strategy_id</code>，<code>create_time</code></td></tr><tr><td><code>orders</code></td><td>活动订单缓存</td><td><code>Dict[str, OrderInfo]</code></td></tr><tr><td><code>strategy_orders</code></td><td>策略顺序映射</td><td><code>Dict[str, set]</code></td></tr><tr><td><code>system_to_ctp_orderid</code></td><td>ID映射</td><td>系统 ID → CTP ID</td></tr></tbody></table><h3 id="订单-id-映射" tabindex="-1">订单 ID 映射 <a class="header-anchor" href="#订单-id-映射" aria-label="Permalink to &quot;订单 ID 映射&quot;">​</a></h3><p>系统维护内部订单ID和网关订单ID之间的双向映射：</p><ul><li><code>system_to_ctp_orderid</code>：将内部 UUID 映射到 CTP 订单 ID</li><li><code>ctp_to_system_orderid</code>：将 CTP 订单 ID 映射回内部 UUID</li></ul><p>这使得跨系统边界的正确订单跟踪成为可能。</p><h2 id="账户管理" tabindex="-1">账户管理 <a class="header-anchor" href="#账户管理" aria-label="Permalink to &quot;账户管理&quot;">​</a></h2><p>该<code>AccountManager</code>类别通过交易网关定期同步来跟踪账户余额、头寸和策略级损益。</p><h3 id="定期同步" tabindex="-1">定期同步 <a class="header-anchor" href="#定期同步" aria-label="Permalink to &quot;定期同步&quot;">​</a></h3><p>账户管理器实现自动同步：</p><ul><li><strong>查询间隔</strong>：30秒定期更新</li><li><strong>事件驱动更新</strong>：实时交易处理</li><li><strong>网关集成</strong>：账户和头寸查询</li></ul><h2 id="集成架构" tabindex="-1">集成架构 <a class="header-anchor" href="#集成架构" aria-label="Permalink to &quot;集成架构&quot;">​</a></h2><p>交易引擎通过事件驱动接口与更广泛的系统集成：</p><h3 id="关键事件类型" tabindex="-1">关键事件类型 <a class="header-anchor" href="#关键事件类型" aria-label="Permalink to &quot;关键事件类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件类型</th><th>来源</th><th>目标</th><th>目的</th></tr></thead><tbody><tr><td><code>STRATEGY_SIGNAL</code></td><td>战略</td><td>订单管理器</td><td>订单下达请求</td></tr><tr><td><code>RISK_APPROVED</code></td><td>风险管理器</td><td>订单管理器</td><td>风险验证结果</td></tr><tr><td><code>GATEWAY_SEND_ORDER</code></td><td>订单管理器</td><td>网关</td><td>订单执行</td></tr><tr><td><code>ORDER_FILLED</code></td><td>网关</td><td>客户经理</td><td>贸易更新</td></tr><tr><td><code>ACCOUNT_UPDATED</code></td><td>网关</td><td>客户经理</td><td>帐户同步</td></tr></tbody></table>`,43)),d(n)])}const q=s(b,[["render",g]]);export{y as __pageData,q as default};
