import{_ as n,C as a,c as d,o,j as s,G as e,ar as l,a as h}from"./chunks/framework.CXkkaYWf.js";const y=JSON.parse('{"title":"数据服务","description":"","frontmatter":{},"headers":[],"relativePath":"dataservice/dataservice.md","filePath":"dataservice/dataservice.md","lastUpdated":1752921531000}'),c={name:"dataservice/dataservice.md"};function p(k,t,g,b,u,E){const i=a("NolebasePageProperties"),r=a("NolebaseGitChangelog");return o(),d("div",null,[t[0]||(t[0]=s("h1",{id:"数据服务",tabindex:"-1"},[h("数据服务 "),s("a",{class:"header-anchor",href:"#数据服务","aria-label":'Permalink to "数据服务"'},"​")],-1)),e(i),t[1]||(t[1]=l(`<h2 id="市场数据订阅管理" tabindex="-1">市场数据订阅管理 <a class="header-anchor" href="#市场数据订阅管理" aria-label="Permalink to &quot;市场数据订阅管理&quot;">​</a></h2><p>订阅系统通过全面的状态跟踪、超时处理和交易时间感知来管理向交易策略传递的实时市场数据。</p><h3 id="订阅架构" tabindex="-1">订阅架构 <a class="header-anchor" href="#订阅架构" aria-label="Permalink to &quot;订阅架构&quot;">​</a></h3><p>系统维护三个用于订阅管理的关键数据结构：</p><ul><li><strong><code>subscribers</code></strong>：将符号映射到策略 ID 集</li><li><strong><code>strategy_subscriptions</code></strong>：将策略 ID 映射到合约集</li><li><strong><code>subscription_states</code></strong>：使用时间戳跟踪详细的订阅状态</li></ul><h3 id="交易时间检测" tabindex="-1">交易时间检测 <a class="header-anchor" href="#交易时间检测" aria-label="Permalink to &quot;交易时间检测&quot;">​</a></h3><p>该系统包括智能交易时间检测，以区分正常超时情况和潜在的数据问题：</p><ul><li><strong>日间场次</strong>：9:00-11:30, 13:30-15:00</li><li><strong>夜间场次</strong>：21:00-02:30</li><li><strong>周末过滤</strong>：不包括周六和周日</li><li><strong>超时行为</strong>：交易时间内更积极地重试</li></ul><h2 id="k线生成" tabindex="-1">K线生成 <a class="header-anchor" href="#k线生成" aria-label="Permalink to &quot;K线生成&quot;">​</a></h2><p>该系统使用多时间框架方法，根据报价数据生成实时 K 线（条形图）。系统会<code>BarManager</code>协调多个<code>BarGenerator</code>实例，以便同时创建不同时间间隔的条形图。</p><h3 id="棒材生成组件" tabindex="-1">棒材生成组件 <a class="header-anchor" href="#棒材生成组件" aria-label="Permalink to &quot;棒材生成组件&quot;">​</a></h3><table tabindex="0"><thead><tr><th>成分</th><th>目的</th><th>方法</th></tr></thead><tbody><tr><td><code>BarGenerator</code></td><td>单品种、单间隔条形图创建</td><td><code>on_tick()</code></td></tr><tr><td><code>BarManager</code></td><td>多符号、多间隔协调</td><td><code>on_tick()</code></td></tr></tbody></table><h2 id="性能监控与统计" tabindex="-1">性能监控与统计 <a class="header-anchor" href="#性能监控与统计" aria-label="Permalink to &quot;性能监控与统计&quot;">​</a></h2><p><code>DataService</code>维护全面的性能统计数据并提供系统健康和吞吐量分析的监控功能。</p><h3 id="绩效指标" tabindex="-1">绩效指标 <a class="header-anchor" href="#绩效指标" aria-label="Permalink to &quot;绩效指标&quot;">​</a></h3><p>该系统跟踪以下关键绩效指标：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;tick_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Total ticks processed</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;bar_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Total bars generated  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;last_tick_time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Timestamp of last tick</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;processing_rate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Ticks per second</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="服务统计api" tabindex="-1">服务统计API <a class="header-anchor" href="#服务统计api" aria-label="Permalink to &quot;服务统计API&quot;">​</a></h3><p>该<code>get_service_stats()</code>方法提供了全面的服务指标：</p><table tabindex="0"><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>tick_count</code></td><td>已处理报价总数</td></tr><tr><td><code>bar_count</code></td><td>生成的条块总数</td></tr><tr><td><code>processing_rate</code></td><td>计算的刻度/秒</td></tr><tr><td><code>buffer_size</code></td><td>当前缓冲区大小</td></tr><tr><td><code>subscribers_count</code></td><td>有效订阅</td></tr><tr><td><code>db_path</code></td><td>数据库文件路径</td></tr></tbody></table><h3 id="数据流统计" tabindex="-1">数据流统计 <a class="header-anchor" href="#数据流统计" aria-label="Permalink to &quot;数据流统计&quot;">​</a></h3><p>系统提供详细的数据流监控日志：</p><ul><li><strong>Tick处理</strong>：每 100 次 tick 记录一次订阅者数量</li><li><strong>K线生成</strong>：使用 OHLC 数据记录每个生成的K线</li><li><strong>订阅事件</strong>：详细记录订阅状态和超时</li></ul>`,23)),e(r)])}const m=n(c,[["render",p]]);export{y as __pageData,m as default};
