import{_ as p,C as t,c as r,o,j as a,G as i,ar as k,a as e,w as l}from"./chunks/framework.CXkkaYWf.js";const C=JSON.parse('{"title":"事件驱动系统","description":"","frontmatter":{},"headers":[],"relativePath":"core/event_driven_system.md","filePath":"core/event_driven_system.md","lastUpdated":1752832074000}'),c={name:"core/event_driven_system.md"};function E(g,s,y,b,u,_){const d=t("NolebasePageProperties"),n=t("VPNolebaseInlineLinkPreview"),h=t("NolebaseGitChangelog");return o(),r("div",null,[s[7]||(s[7]=a("h1",{id:"事件驱动系统",tabindex:"-1"},[e("事件驱动系统 "),a("a",{class:"header-anchor",href:"#事件驱动系统","aria-label":'Permalink to "事件驱动系统"'},"​")],-1)),i(d),s[8]||(s[8]=a("h2",{id:"职责和范围",tabindex:"-1"},[e("职责和范围 "),a("a",{class:"header-anchor",href:"#职责和范围","aria-label":'Permalink to "职责和范围"'},"​")],-1)),s[9]||(s[9]=a("p",null,[e("事件驱动系统是Homalos量化交易系统中所有组件之间实现异步、松耦合交互的基础通信机制。该系统以"),a("code",null,"EventBus"),e("提供高性能事件路由的类为核心，具备双通道处理（同步和异步）、基于优先级的事件处理以及全面的线程安全。")],-1)),a("p",null,[s[2]||(s[2]=e("本文档涵盖了")),s[3]||(s[3]=a("code",null,"EventBus",-1)),s[4]||(s[4]=e("事件系统的实现、事件类型和优先级、线程安全机制以及组件在整个系统中的异步通信方式。有关使用此事件系统的更广泛的系统架构的信息，请参阅")),i(n,{href:"https://deepwiki.com/Homalos/Homalos/2-core-architecture",target:"_blank",rel:"noreferrer"},{default:l(()=>s[0]||(s[0]=[e("核心架构")])),_:1,__:[0]}),s[5]||(s[5]=e("。有关使用事件的特定组件的详细信息，请参阅")),i(n,{href:"https://deepwiki.com/Homalos/Homalos/2.2-trading-engine",target:"_blank",rel:"noreferrer"},{default:l(()=>s[1]||(s[1]=[e("交易引擎")])),_:1,__:[1]}),s[6]||(s[6]=e("。"))]),s[10]||(s[10]=k(`<h2 id="eventbus-架构" tabindex="-1">EventBus 架构 <a class="header-anchor" href="#eventbus-架构" aria-label="Permalink to &quot;EventBus 架构&quot;">​</a></h2><p>该类<code>EventBus</code>实现了双通道事件处理系统，具有单独的同步和异步队列，每个队列由专用的工作线程进行管理。</p><p>维护<code>EventBus</code>两个独立的处理通道：</p><table tabindex="0"><thead><tr><th>渠道</th><th>队列大小</th><th>线</th><th>目的</th></tr></thead><tbody><tr><td>同步</td><td>10,000</td><td><code>_sync_thread</code></td><td>需要立即处理的时间关键事件</td></tr><tr><td>异步</td><td>10,000</td><td><code>_async_thread</code></td><td>后台处理和日志记录</td></tr></tbody></table><h2 id="事件类型和优先级" tabindex="-1">事件类型和优先级 <a class="header-anchor" href="#事件类型和优先级" aria-label="Permalink to &quot;事件类型和优先级&quot;">​</a></h2><p>事件系统使用全面的类型层次结构，并通过<code>EventPriority</code>枚举和<code>EventType</code>类实现基于优先级的处理。</p><p>优先级系统将事件路由到适当的处理通道：</p><table tabindex="0"><thead><tr><th>优先事项</th><th>价值</th><th>加工通道</th><th>示例事件</th></tr></thead><tbody><tr><td><code>CRITICAL</code></td><td>0</td><td>同步</td><td><code>SYSTEM_ERROR</code>，<code>RISK_REJECTED</code></td></tr><tr><td><code>HIGH</code></td><td>1</td><td>同步</td><td><code>ORDER</code>，<code>TRADE</code>, <code>GATEWAY_CONNECTED</code></td></tr><tr><td><code>NORMAL</code></td><td>2</td><td>异步</td><td><code>MARKET_TICK</code>，<code>POSITION_UPDATED</code></td></tr><tr><td><code>LOW</code></td><td>3</td><td>异步</td><td><code>LOG_MESSAGE</code>，<code>STATISTICS</code></td></tr></tbody></table><h2 id="线程安全和性能" tabindex="-1">线程安全和性能 <a class="header-anchor" href="#线程安全和性能" aria-label="Permalink to &quot;线程安全和性能&quot;">​</a></h2><p>系统通过<code>ThreadSafeCallback</code>类和内部的仔细队列管理实现了全面的线程安全<code>EventBus</code>。</p><p>关键线程安全特性：</p><ul><li><strong>回调调度</strong>：<code>ThreadSafeCallback.schedule_async_task()</code>方法<code>schedule_callback()</code>处理跨线程通信</li><li><strong>重试逻辑</strong>：内置可配置的重试<code>max_retries</code>机制<code>retry_delay</code></li><li><strong>优雅关闭</strong>：<code>EventType.SHUTDOWN</code>基于超时的线程连接信号</li><li><strong>队列保护</strong>：<code>Queue.put_nowait()</code>通过<code>Full</code>异常处理来防止阻塞</li></ul><h2 id="事件流和通信" tabindex="-1">事件流和通信 <a class="header-anchor" href="#事件流和通信" aria-label="Permalink to &quot;事件流和通信&quot;">​</a></h2><p>事件驱动的通信模式通过标准化的事件发布和订阅实现系统组件之间的松耦合交互。</p><h2 id="使用模式" tabindex="-1">使用模式 <a class="header-anchor" href="#使用模式" aria-label="Permalink to &quot;使用模式&quot;">​</a></h2><h3 id="事件发布" tabindex="-1">事件发布 <a class="header-anchor" href="#事件发布" aria-label="Permalink to &quot;事件发布&quot;">​</a></h3><p>组件使用<code>EventBus.publish()</code>可选异步处理的方法发布事件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># High priority synchronous event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.publish(Event(EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ORDER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, order_data))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Background asynchronous event  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.publish(Event(EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MARKET_TICK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tick_data), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">is_async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using convenience functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> create_trading_event(EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RISK_CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, risk_data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.publish(event)</span></span></code></pre></div><h3 id="事件订阅" tabindex="-1">事件订阅 <a class="header-anchor" href="#事件订阅" aria-label="Permalink to &quot;事件订阅&quot;">​</a></h3><p>组件订阅特定的事件类型或使用全局处理程序：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Subscribe to specific event type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.subscribe(EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ORDER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handle_order)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Subscribe to async processing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.subscribe(EventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MARKET_TICK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handle_tick, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">is_async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Global handler for all events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.subscribe_global(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handle_all_events)</span></span></code></pre></div><h3 id="事件监控" tabindex="-1">事件监控 <a class="header-anchor" href="#事件监控" aria-label="Permalink to &quot;事件监控&quot;">​</a></h3><p>系统通过事件监视器和统计数据提供全面的监控：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add event monitor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event_bus.add_monitor(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log_event)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get runtime statistics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event_bus.get_stats()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Returns: total_events_published, sync_events_processed, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#          async_events_processed, error_count, etc.</span></span></code></pre></div><p>事件驱动系统构成了 Homalos 架构的支柱，实现了所有系统组件之间的高性能、线程安全通信，同时保持了明确的关注点分离，并支持实时和后台处理要求。</p>`,25)),i(h)])}const m=p(c,[["render",E]]);export{C as __pageData,m as default};
